name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,AWS_REGION
          script: |
            cd ~/CarFin
            
            # 1. AWS CLI 설치 확인 및 설치
            if ! command -v aws &> /dev/null; then
              echo "AWS CLI not found, installing..."
              sudo apt update
              # Ubuntu 24.04에서는 awscli2 패키지 사용
              sudo apt install awscli2 -y || sudo apt install awscli -y || curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && sudo ./aws/install
            fi
            
            # 2. 기존 컨테이너 중지 (권한 문제 해결)
            docker-compose down || true
            
            # 3. 최신 코드 받기 (볼륨 마운트용)
            git fetch origin main
            git reset --hard origin/main
            git clean -fd
            
            # 4. ECR 로그인
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            
            # 5. 기존 컨테이너 완전 삭제 (볼륨 포함)
            docker-compose down -v
            
            # 6. 기존 이미지 완전 제거 (강제)
            docker rmi ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest || true
            docker rmi ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} || true
            
            # 7. 최신 이미지 pull (강제)
            docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
            
            # 8. 새 컨테이너 시작 (강제 재빌드)
            docker-compose up -d --force-recreate --remove-orphans
            
            # 9. 정리 (사용하지 않는 이미지 제거)
            docker image prune -af

